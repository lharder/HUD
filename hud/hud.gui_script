require( "hud.util" )


local playerSpecs

local radars = {}
local blips = {}
local bars = {}



function init( self )
	gui.set_enabled( gui.get_node( "radarTmpl" ), false )
	gui.set_enabled( gui.get_node( "hBarTmpl" ), false )
end


-- RADAR functions ---------------------------------------------
local function createRadar( radarId, x, y, hexcol, imgBG ) 
	if radarId == nil then radarId = 1 end
	
	local tmpl = gui.get_node( "radarTmpl" )
	local radar = gui.clone( tmpl )
	gui.set_id( radar, radarId )
	gui.set_enabled( radar, true )

	local pos = gui.get_position( radar )
	pos.x = x or 0
	pos.y = y or 0
	gui.set_position( radar, pos )

	if hexcol == nil then hexcol = "99b3ff" end
	gui.set_color( radar, Color( hexcol, .6 ) )

	local atlas, img = Texture( imgBG, "hud/radar" )
	gui.set_texture( radar, atlas )
	gui.play_flipbook( radar, img )

	table.insert( radars, radarId, radar )
end


local function createRadarBlip( radarId, pos, color ) 
	if radarId == nil then radarId = 1 end

	-- create a blip from template 
	local blip = gui.new_text_node( pos, "." )

	if color == nil then color = Color( "#ffffff", 1 ) end
	gui.set_color( blip, color )

	-- and attach to proper radar
	local radarBG = gui.get_node( radarId )
	gui.set_parent( blip, radarBG )
	
	return blip
end


local function updateRadarBlip( radarId, contactId, pos, color, weight ) 
	if radarId == nil then radarId = 1 end
	
	if color ~= nil then 
		color = Color( color, 1 )
	end
	
	if( blips[ hash( contactId ) ] == nil ) then
		blips[ hash( contactId ) ] = createRadarBlip( radarId, pos, color )
	end
	 
	pos.x = -1 * pos.x
	pos.y = -1 * pos.y
	gui.set_position( blips[ hash( contactId ) ], pos )
end


local function removeRadarBlip( radarId, contactId )
	if radarId == nil then radarId = 1 end
	
	local id = hash( contactId )
	if blips[ id ] ~= nil then
		gui.delete_node( blips[ id ] )
		blips[ id ] = nil
	end
end


-- Bar handling
function createHBar( id, x, y, width, height, value, color )
	if id == nil then return nil end

	-- BG bar
	local tmpl = gui.get_node( "hBarTmpl" )
	local hbar = gui.clone( tmpl )
	gui.set_enabled( hbar, true )

	local pos = gui.get_position( hbar )
	pos.x = x or 0
	pos.y = y or 0
	gui.set_position( hbar, pos )

	local size = vmath.vector3( width, height, 1 )
	gui.set_size( hbar, size )

	-- Label
	tmpl = gui.get_node( "hBarTxtTmpl" )
	local hbarTxt = gui.clone( tmpl )
	gui.set_id( hbarTxt, id .. "Txt" )
	gui.set_enabled( hbarTxt, true )
	gui.set_parent( hbarTxt, hbar, true )

	pos = gui.get_position( hbarTxt )
	pos.x = -5
	pos.y = 0
	gui.set_position( hbarTxt, pos )

	gui.set_text( hbarTxt, id )
	
	-- Value bar
	tmpl = gui.get_node( "hBarValTmpl" )
	local hbarVal = gui.clone( tmpl )
	gui.set_id( hbarVal, id )
	gui.set_enabled( hbarVal, true )
	gui.set_parent( hbarVal, hbar, true )
	
	pos = gui.get_position( hbarVal )
	pos.x = 0
	pos.y = 0
	gui.set_position( hbarVal, pos )

	size = vmath.vector3( value, height, 1 )
	gui.set_size( hbarVal, size )

	updateHBar( id, value, color )
end



function updateHBar( id, value, color )
	local hbarVal = gui.get_node( id )
	if hbarVal == nil then return nil end
	
	local size = gui.get_size( hbarVal )
	size.x = value
	gui.set_size( hbarVal, size )

	if color == nil then color = Color( "#02edff", 1 ) end
	gui.set_color( hbarVal, color )
end


function setCaptionHBar( id, caption, x, y, color, scale )
	local hbarTxt = gui.get_node( id .. "Txt" )
	if hbarTxt == nil then return nil end

	if caption ~= nil then gui.set_text( hbarTxt, caption ) end
	if scale ~= nil then gui.set_scale( hbarTxt, scale ) end
	if color ~= nil then gui.set_color( hbarTxt, color) end

	if x ~= nil or y ~= nil then
		local pos = gui.get_position( hbarTxt )

		if( x == nil ) then x = pos.x end
		if( y == nil ) then y = pos.y end
		
		pos.x = x
		pos.y = y
		gui.set_position( hbarTxt, pos )
	end
end



-- Standard events -------------------------------------
function on_message( self, message_id, message, sender )
	if message_id == hash( "createRadar" ) then
		createRadar( message.id, message.x, message.y, message.color, message.bgTexture )
		
	elseif message_id == hash( "updateRadarBlips" ) then
		for i, blip in ipairs( message ) do 	
			updateRadarBlip( blip.radarId, blip.contactId, blip.pos, blip.color, blip.weight )
		end

	elseif message_id == hash( "updateRadarBlip" ) then
		updateRadarBlip( message.radarId, message.contactId, message.pos, message.color, message.weight )

	elseif message_id == hash( "removeRadarBlip" ) then
		removeRadarBlip( message.id, message.contactId )

	elseif message_id == hash( "createHBar" ) then
		createHBar( message.id, message.x, message.y, message.width, message.height, message.value, message.color )

	elseif message_id == hash( "updateHBar" ) then
		updateHBar( message.id, message.value, message.color )

	elseif message_id == hash( "setCaptionHBar" ) then
		setCaptionHBar( message.id, message.caption, message.x, message.y, message.color, message.scale )
			
	end
end

