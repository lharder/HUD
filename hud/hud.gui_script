local playerSpecs

local radars = {}
local blips = {}
local bars = {}


-- helper ----------------------------------------------------
function string:split( sep )
	local sep, fields = sep or ":", {}
	local pattern = string.format( "([^%s]+)", sep )
	self:gsub( pattern, function( c ) fields[ #fields+1 ] = c end )

	return fields
end


function string:startsWith( txt )
	return string.sub( self, 1, string.len( txt ) ) == txt
end


local function Color( hex, alpha )
	if hex == nil then return nil end

	if hex:startsWith( "#" ) then 
		hex = string.sub( hex, 2, string.len( hex ) ) 
	end
	
	local r, g, b = hex:match( "(%w%w)(%w%w)(%w%w)" )
	r = ( tonumber( r, 16 ) or 0 ) / 255
	g = ( tonumber( g, 16 ) or 0 ) / 255
	b = ( tonumber( b, 16 ) or 0 ) / 255
	
	return vmath.vector4( r, g, b, alpha or 1 )
end


local function Texture( url, default ) 
	local atlas = ""
	local img = ""
	
	if default ~= nil then 
		local parts = default:split( "/" )
		atlas = parts[ 1 ]
		img = parts[ 2 ]
	end
	
	if texture ~= nil then 
		local parts = texture:split( "/" )
		atlas = parts[ 1 ]
		img = parts[ 2 ]
	end

	return atlas, img
end

----------------------------------------------------



function init( self )
	local radarBG = gui.get_node( "radarTmpl" )
	-- gui.set_enabled( radarBG, false )
end


-- RADAR functions ---------------------------------------------
local function createRadar( radarId, x, y, hexcol, imgBG ) 
	if radarId == nil then radarId = 1 end
	
	local tmpl = gui.get_node( "radarTmpl" )
	local radar = gui.clone( tmpl )
	gui.set_id( radar, radarId )
	gui.set_enabled( radar, true )

	local pos = gui.get_position( radar )
	pos.x = x or 0
	pos.y = y or 0
	gui.set_position( radar, pos )

	if hexcol == nil then hexcol = "99b3ff" end
	gui.set_color( radar, Color( hexcol, .6 ) )

	local atlas, img = Texture( imgBG, "hud/radar" )
	gui.set_texture( radar, atlas )
	gui.play_flipbook( radar, img )

	table.insert( radars, radarId, radar )
end


local function createRadarBlip( radarId, pos, color ) 
	if radarId == nil then radarId = 1 end

	-- create a blip from template 
	local blip = gui.new_text_node( pos, "." )

	if color == nil then color = Color( "#ffffff", 1 ) end
	gui.set_color( blip, color )

	-- and attach to proper radar
	local radarBG = gui.get_node( radarId )
	gui.set_parent( blip, radarBG )
	
	return blip
end


local function updateRadarBlip( radarId, contactId, pos, color, weight ) 
	if radarId == nil then radarId = 1 end
	
	if color ~= nil then 
		color = Color( color, 1 )
	end
	
	if( blips[ hash( contactId ) ] == nil ) then
		blips[ hash( contactId ) ] = createRadarBlip( radarId, pos, color )
	end
	 
	pos.x = -1 * pos.x
	pos.y = -1 * pos.y
	gui.set_position( blips[ hash( contactId ) ], pos )
end


local function removeRadarBlip( radarId, contactId )
	if radarId == nil then radarId = 1 end
	
	local id = hash( contactId )
	if blips[ id ] ~= nil then
		gui.delete_node( blips[ id ] )
		blips[ id ] = nil
	end
end



function on_message( self, message_id, message, sender )
	if message_id == hash( "createRadar" ) then
		createRadar( message.id, message.x, message.y, message.color, message.bgTexture )
		
	elseif message_id == hash( "updateRadarBlips" ) then
		for i, blip in ipairs( message ) do 	
			updateRadarBlip( blip.radarId, blip.contactId, blip.pos, blip.color, blip.weight )
		end

	elseif message_id == hash( "updateRadarBlip" ) then
		updateRadarBlip( message.radarId, message.contactId, message.pos, message.color, message.weight )

	elseif message_id == hash( "removeRadarBlip" ) then
		removeRadarBlip( message.id, message.contactId )
	end
end

